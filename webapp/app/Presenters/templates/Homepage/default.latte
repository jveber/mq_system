{block scripts} 
    <script type="text/javascript" src="{$basePath}/paho-mqtt-min.js"></script>
    <script type="text/javascript" src="{$basePath}/jquery-3.5.1.min.js"></script>
    <script type="text/javascript" src="{$basePath}/jquery.md5.min.js"></script>
    <script type="text/javascript" src="{$basePath}/netteForms.min.js"></script>
    <script type="text/javascript" src="{$basePath}/nette.ajax.js"></script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <link rel="stylesheet" type="text/css" href="{$basePath}/flatpickr.min.css">
    <script type="text/javascript" src="{$basePath}/flatpickr.min.js"></script>
    <style type="text/css">
.ui-menu:after {
    content: ".";
    display: block;
    clear: both;
    visibility: hidden;
    line-height: 0;
    height: 0;
}
.ui-menu .ui-menu-item {
    display: inline-block;
    float: left;
    margin: 0;
    padding: 0;
    width: auto;
}

#sensors {
    display: flex;
     flex-wrap: wrap;
}
#log {
    width: 100%;
    height: 25em;
    overflow: auto;
}
.sensor {
    display: inline-block;
    float: left;
    margin: 4px;
    padding: 7px;
    border: 1px solid;
    border-radius: 16px;
}
    </style>
    <script type="text/javascript">
    $( function() {
        // $("#menu").menu();
        $("#graph").hide();
        // $("#log").resizable();
    } );
    </script>
    <script type="text/javascript">
        $(function () { $.nette.init(); }); //initialize nette AJAX
        $.nette.ext('ajax', {
            success: function(payload) {
                if (payload.hasOwnProperty("values")) {
                    google.charts.load('current', {'packages':['corechart'], 'language' : navigator.language || navigator.userLanguage});
                    google.charts.setOnLoadCallback(drawChart);
                    function drawChart() {
                        var data = new google.visualization.DataTable();
                        data.addColumn("datetime", "ÄŒas");
                        for (var row in payload.firstrow) {
                            data.addColumn("number", payload.firstrow[row]);
                        }
                        for (i = 0; i < payload.values.length; ++i) {
                            payload.values[i][0] = new Date(payload.values[i][0] * 1000);
                        }
                        data.addRows(payload.values);
                        var options = {
                            title: payload.value_type,
                            //curveType: 'function',
                            legend: { position: 'bottom' },
                            vAxis: { title: payload.units },
                            hAxis: { },
                            // width: 1000, 
                            interpolateNulls: true,
                        };
                        var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
                        chart.draw(data, options);
                    }
                }
            },
            complete: function() { 
                $('input.datetimepicker').flatpickr({
                    time_24hr: true,
                    enableTime: true,
                    dateFormat: 'd.m.Y H:i',
                });
                // $( "#tabs" ).tabs( "refresh" );
            }
        });
    </script>
    <script type="text/javascript">
        $('#text').append('Location: ' + window.location.hostname + ' Port: ' + Number(window.location.port));
        var port = Number(window.location.port);
        if (port == 0 && window.location.protocol == "http:")
            port = 80;
        if (port == 0 && window.location.protocol == "https:")
            port = 443;
        client = new Paho.MQTT.Client(window.location.hostname, port , "/ws/", "myclientid_" + parseInt(Math.random() * 100, 10));
        var options = {
            cleanSession: true,
            keepAliveInterval: 30,
            //Gets Called if the connection has successfully been established
            onSuccess: function () {
                $('#ws-status').text('Connected...');
                client.subscribe('#', { qos: 2 });
            }, 
            //Gets Called if the connection could not be established
            onFailure: function (message) {
                $('#ws-status').text('Connection failed: ' + message.errorMessage);
                setTimeout(function(){ client.connect(options); }, 2000);
            }
        };
        //Reconnect
        client.onConnectionLost = function (responseObject) {
            $('#ws-status').text('Connection lost trying to reconnect... ' + responseObject.errorMessage);
            client.connect(options);
        };
        //Parse mqtt message
        client.onMessageArrived = function (message) {
            var timestamp = new Date();
            if (message.destinationName == "app/log/message"){
        if ($('#log > p').length >= 200) {
                    $('#log :last-child').remove();
                }
                $('#log').prepend("<p>" + message.payloadString);
            } else if (message.destinationName.substring(0,6) == "status") {
                var sensor = message.destinationName.replace(new RegExp("\/","g"), '\\/');
                if (!$('#' + sensor).length) {
                    $('#sensors').append("<div class='sensor' id='" +  message.destinationName + "'><span class='sensor_name'>" +  message.destinationName + "</span></div>");
                }
                try {
                    var data = JSON.parse(message.payloadString); 
                    for (var property in data) {
                        if (data.hasOwnProperty(property)) {
                            var value = Array.isArray(data[property]) ? data[property][0] : data[property];
                            const selector = '#' + sensor + ' .' + $.MD5(property);
                            if (!$(selector).length) {
                                $('#' + sensor).append('<div class="' + $.MD5(property) + '"><span class="value_time">' + timestamp.toLocaleString() + '</span> <span class="value_name">' + property + '</span> <span class="value">' + value.toFixed(2) + '</span></div>');
                                if (Array.isArray(data[property])) {
                                    $('#' + sensor + ' > .' + $.MD5(property)).append(' <span class="units">' +data[property][1] + '</span>');
                                }
                            }
                            
                            var selector_time = selector + ' > .value_time';
                            var selector_value = selector + ' > .value'; 
                            $(selector_time).text(timestamp.toLocaleString());
                            $(selector_value).text(value.toFixed(2));
                        }
                    }
                }catch (err){
                    $('#ws-status').append("<p>JSON parse error: " + err.message + " in string: " + message.payloadString);
                }
            }
        };
        //Attempt to connect
        client.connect(options);
    </script>

{/block}
{block content}
    {var $sensor = ""}
    <div id="sensors">
    {foreach $posts as $post}
        {if $sensor != $post->sensor_name}
            {if !$iterator->first}
                </div>
            {/if}
            {var $sensor = $post->sensor_name}
            <div class="sensor" id="{$post->sensor_name}">
            <span class="sensor_name">{$post->sensor_name}</span>
        {/if}
            {*
        <a class="ajax" href="{link graph: 'sensors[0]' => $post->sensor_id, 'value' => $post->value_name, 'date_from' => $date_from, 'date_to' => $date_to}">
            *}
            <a onclick='$("#log, #exe").hide(); $("#graph").show()' class="ajax" href="{link graph! 'sensors[0]' => $post->sensor_id, 'value' => $post->value_name, 'date_from' => $date_from, 'date_to' => $date_to}">
            <div n:class="$post_hash[$post->value_name]">
        <span class="value_time">{$post->timestamp|date:'j. n. Y G:i:s'}</span> {* date:'j. n. Y G:i:s  *}
        <span class="value_name">{$post->value_name}</span>
        <span class="value">{$post->value|number:2}</span>
        <span class="units">{$post->units_name}</span>
        </div></a>
        {if $iterator->last}
            </div>
        {/if}
    {/foreach}
    </div>
    
    <h3>{_'Websocket status'}</h3>
    <div id="ws-status"></div>
    

    <ul id="menu">
        <li><a onclick='$("#graph, #exe").hide("blind"); $("#log").show("blind")' href="#log">{_'Log'}</a></li>
        <li><a onclick='$("#log, #exe").hide("blind"); $("#graph").show("blind")' href="#graph">{_'Graph'}</a></li>
        <li><a onclick='$("#log, #graph").hide("blind"); $("#exe").show("blind")' class="ajax" n:href="exe!">{_'Exe'}</a></li>
    </ul>
  
    <div id="log">
        {foreach $logs as $log}
        <p>{$log->message }
        {/foreach}
    </div>

    <div id="graph">
        {snippet Graph}
        {ifset $stats}
            <h3>{_'Progress in Time'} {_'from'} {$period[0]} {_'to'} {$period[1]}</h3>
            <div id="chart_div"></div>
            <p>{_'Average'} {_'value'}: 
            {foreach $stats as $sensor_stat}
                {foreach $sensor_stat as $row}
                {$row->sensor_name} : {$row->average} {$units} ;
                {/foreach}
            {/foreach}
            <p>{_'Maximal'} {_'difference'}:
            {foreach $stats as $sensor_stat}
                {foreach $sensor_stat as $row}
                 {$row->sensor_name} : {$row->diff} {$units} ;
              {/foreach}
            {/foreach}
            {control graphForm}
        {else}
            <p>{_'No'} {_'values'} {_'for'} {_'graph'}.
        {/ifset}
      {/snippet}
    </div>

    <div id="exe">
        {snippet Exe}
            {ifset $scripts}
                <p><button onclick="client.send('app/exe/reload', '*', 2, false);">{_'Reload Scripts'}</button></p>
                {foreach $scripts as $script}
                    <h3>{$script->name} <a class="ajax" n:href="delscr! $script->name">[{_'Remove'}]</a></h3>
                    <pre>{$script->script}</pre>
                {/foreach}
                {control scriptForm}
            {/ifset}
        {/snippet}
    </div>
{/block}
